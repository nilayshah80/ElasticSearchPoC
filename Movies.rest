@url = http://127.0.0.1:9200
//docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.3.1

### Movie properties
PUT {{url}}/movies
Content-Type: application/json

{
    "mappings" : {
        "properties" : {
            "year": {
                "type": "date"
            }
        }
    }    
}

### GET Movie properties
GET {{url}}/movies/_mapping
Content-Type: application/json


### Post Signle movie document
POST {{url}}/movies/_doc/109487
Content-Type: application/json

{
    "genre" : ["IMAX", "Sci-Fi"],
    "title": "Interstellar",
    "year": 2014
}

### GET Movie search
GET {{url}}/movies/_search?pretty
Content-Type: application/json

### PUT Bulk movies
PUT {{url}}/_bulk
Content-Type: application/x-ndjson

{ "create" : { "_index" : "movies", "_id" : "135569" } }
{ "id": "135569", "title" : "Star Trek Beyond", "year":2016 , "genre":["Action", "Adventure", "Sci-Fi"] }
{ "create" : { "_index" : "movies", "_id" : "122886" } }
{ "id": "122886", "title" : "Star Wars: Episode VII - The Force Awakens", "year":2015 , "genre":["Action", "Adventure", "Fantasy", "Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "109487" } }
{ "id": "109487", "title" : "Interstellar", "year":2014 , "genre":["Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "58559" } }
{ "id": "58559", "title" : "Dark Knight, The", "year":2008 , "genre":["Action", "Crime", "Drama", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "1924" } }
{ "id": "1924", "title" : "Plan 9 from Outer Space", "year":1959 , "genre":["Horror", "Sci-Fi"] }    
//Give a new line here. Not '\n' but the actual new line.
//don't forget to check content type


### GET Movie search
GET {{url}}/movies/_search?pretty
Content-Type: application/json

### Update movie document with all types
PUT {{url}}/movies/_doc/109487/
Content-Type: application/json

{
    "genre" : ["IMAX", "Sci-Fi"],
    "title": "Interstellar foo",
    "year": 2014
}

### GET Movie search
GET {{url}}/movies/_doc/109487
Content-Type: application/json

### Update movie title only
POST {{url}}/movies/_doc/109487/_update
Content-Type: application/json

{
    "doc":{
        "title": "Interstellar"
    }
}

### GET Movie search for DARK KNIGHT
GET {{url}}/movies/_search?q=Dark
Content-Type: application/json

### Delete Movie
DELETE {{url}}/movies/_doc/58559
Content-Type: application/json

### Update movie title with seq no and primary term for optimistic concurrency
PUT {{url}}/movies/_doc/109487?if_seq_no=8&if_primary_term=1
Content-Type: application/json

{
    "genre" : ["IMAX", "Sci-Fi"],
    "title": "Interstellar",
    "year": 2014
}

### Update movie title only - Concurrency handled by elastic search itsel
POST {{url}}/movies/_doc/109487/_update?retry_on_conflict=5
Content-Type: application/json

{
    "doc":{
        "title": "Interstellar"
    }
}

### GET Movie search results in partial match
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
    "match" : {
    "title" : "Star Trek"
    }
    }
}

### GET Movie search results in partial match
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
    "match_phrase" : {
    "genre" : "sci"
    }
    }
}

### Delete entire Movie index
DELETE {{url}}/movies
Content-Type: application/json

### Movie properties updated after deleting entire index
PUT {{url}}/movies
Content-Type: application/json

{
    "mappings" : {
        "properties" : {
            "id": {"type":"integer"},
            "year": {"type": "date"},
            "genre":{"type":"keyword"},
            "title":{"type": "text", "analyzer":"english"}
        }
    }    
}

### PUT Bulk movies
PUT {{url}}/_bulk
Content-Type: application/x-ndjson

{ "create" : { "_index" : "movies", "_id" : "135569" } }
{ "id": "135569", "title" : "Star Trek Beyond", "year":2016 , "genre":["Action", "Adventure", "Sci-Fi"] }
{ "create" : { "_index" : "movies", "_id" : "122886" } }
{ "id": "122886", "title" : "Star Wars: Episode VII - The Force Awakens", "year":2015 , "genre":["Action", "Adventure", "Fantasy", "Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "109487" } }
{ "id": "109487", "title" : "Interstellar", "year":2014 , "genre":["Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "58559" } }
{ "id": "58559", "title" : "Dark Knight, The", "year":2008 , "genre":["Action", "Crime", "Drama", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "1924" } }
{ "id": "1924", "title" : "Plan 9 from Outer Space", "year":1959 , "genre":["Horror", "Sci-Fi"] }    
//Give a new line here. Not '\n' but the actual new line.
//don't forget to check content type

### GET Movie search results in nothing as case not matched
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
    "match_phrase" : {
    "genre" : "sci-fi"
    }
    }
}

### GET Movie search results in partial match
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
    "match_phrase" : {
    "genre" : "Sci-Fi"
    }
    }
}

### GET Movie search results in partial match
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
    "match" : {
    "title" : "star wars"
    }
    }
}

### Query Lite - google URI Search on elasticsearch docs
GET {{url}}/movies/_search?q=title:star+year:>2010+title:trek
Content-Type: application/json

### Search Query -> Match
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match" : {
            "title": "star"
        }
    }
}

### Search Query -> Bool -> Must Filter
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "bool" : {
            "must": {"term": {"title":"trek"}},
            "filter": {"range": {"year": {"gte": 2010}}}
        }
    }
}


###Phrase Search
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "title": "star wars"
        }
    }
}

###Phrase Search
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match_phrase": {
            "title": "star wars"
        }
    }
}

###Phrase Search - slop 1 proximity query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match_phrase": {
            "title": {"query": "star beyond", "slop":1}
        }
    }
}

###Phrase Search - slop 100 proximity query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match_phrase": {
            "title": {"query": "star beyond", "slop":100}
        }
    }
}

###Query Lite - Not working
GET {{url}}/movies/_search?q=+year:>1980+title:star%20wars
Content-Type: application/json

###Query Lite with URL Encode - working
GET {{url}}/movies/_search?q=%2Byear%3A%3E1980+%2Btitle%3Astar%20wars
Content-Type: application/json


###Phrase Search - slop 100 proximity query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": {"match_phrase": {"title": "Star Wars"}},
            "filter": {"range": {"year": {"gte": 1980}}}
        }
    }
}

###Pagination - From default to 0
GET {{url}}/movies/_search?size=2
Content-Type: application/json

###Pagination
GET {{url}}/movies/_search?size=2&from=2
Content-Type: application/json

###Pagination
GET {{url}}/movies/_search
Content-Type: application/json

{
    "from": 2,
    "size": 2,
    "query": {"match": {"genre": "Sci-Fi"}}
}


###Sorting
GET {{url}}/movies/_search?sort=year
Content-Type: application/json

###Sorting - will result in error because of analyzer
GET {{url}}/movies/_search?sort=title
Content-Type: application/json


//Delete whole index and recreate with different mapping with title.raw
### Delete entire Movie index
DELETE {{url}}/movies
Content-Type: application/json

### Movie properties updated after deleting entire index
PUT {{url}}/movies
Content-Type: application/json

{
    "mappings" : {
        "properties" : {
            "title": {
                "type": "text",
                "fields": {
                    "raw": {
                        "type": "keyword"
                    }
                }
            }
        }
    }    
}

### PUT Bulk movies
PUT {{url}}/_bulk
Content-Type: application/x-ndjson

{ "create" : { "_index" : "movies", "_id" : "135569" } }
{ "id": "135569", "title" : "Star Trek Beyond", "year":2016 , "genre":["Action", "Adventure", "Sci-Fi"] }
{ "create" : { "_index" : "movies", "_id" : "122886" } }
{ "id": "122886", "title" : "Star Wars: Episode VII - The Force Awakens", "year":2015 , "genre":["Action", "Adventure", "Fantasy", "Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "109487" } }
{ "id": "109487", "title" : "Interstellar", "year":2014 , "genre":["Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "58559" } }
{ "id": "58559", "title" : "Dark Knight, The", "year":2008 , "genre":["Action", "Crime", "Drama", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "1924" } }
{ "id": "1924", "title" : "Plan 9 from Outer Space", "year":1959 , "genre":["Horror", "Sci-Fi"] }    
//Give a new line here. Not '\n' but the actual new line.
//don't forget to check content type

###Sorting - will result in error because of analyzer
GET {{url}}/movies/_search?sort=title.raw
Content-Type: application/json

###Filter Query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": {"match": {"genre": "Sci-Fi"}},
            "must_not": {"match": {"title": "trek"}},
            "filter": {"range": {"year": {"gte": 2010, "lt": 2015}}}
        }
    }
}

###Filter Query
GET {{url}}/movies/_search?sort=title.raw
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": {"match": {"genre": "Sci-Fi"}},
            "filter": {"range": {"year": {"lt": 1960}}}
        }
    }
}

###Fuzzy matches - will tolerate fuziness of 2 char insertion, substitution and deletion
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "fuzzy": {
            "title": {"value":"intrsteller", "fuzziness": 2}
        }
    }
}
// in 'intrsteller' two char are wrong in typo

###Fuzzy matches - will tolerate fuziness of 2 char insertion, substitution and deletion
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "fuzzy": {
            "title": {"value":"intrsteller", "fuzziness": 2}
        }
    }
}

//Delete whole index and recreate with different mapping with year as text
### Delete entire Movie index
DELETE {{url}}/movies
Content-Type: application/json

### Movie properties updated after deleting entire index
PUT {{url}}/movies
Content-Type: application/json

{
    "mappings" : {
        "properties": {
            "year": {
                "type": "text"
            }
        }
    }     
}

### PUT Bulk movies
PUT {{url}}/_bulk
Content-Type: application/x-ndjson

{ "create" : { "_index" : "movies", "_id" : "135569" } }
{ "id": "135569", "title" : "Star Trek Beyond", "year":2016 , "genre":["Action", "Adventure", "Sci-Fi"] }
{ "create" : { "_index" : "movies", "_id" : "122886" } }
{ "id": "122886", "title" : "Star Wars: Episode VII - The Force Awakens", "year":2015 , "genre":["Action", "Adventure", "Fantasy", "Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "109487" } }
{ "id": "109487", "title" : "Interstellar", "year":2014 , "genre":["Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "58559" } }
{ "id": "58559", "title" : "Dark Knight, The", "year":2008 , "genre":["Action", "Crime", "Drama", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "1924" } }
{ "id": "1924", "title" : "Plan 9 from Outer Space", "year":1959 , "genre":["Horror", "Sci-Fi"] }    
//Give a new line here. Not '\n' but the actual new line.
//don't forget to check content type


###Partial match - prefix query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "prefix": {
            "year": "201"
        }
    }
}

###Wildcard query
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "wildcard": {
            "year": "1*"
        }
    }
}

###Query-time search-as-you-type - abusing sloppiness
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match_phrase_prefix": {
            "title": {
                "query": "star trek",
                "slop": 10
            }
        }
    }
}
//try with different query term like 'star', 'tr', 'star t', etc

//N-grams

//"star":
//unigram: [s,t,a,r]
//bigram: [st,ta,ar]
//trigram: [sta,tar]
//4-gram: [star]
//edge n-grams are built only on the beginning of each term

//Delete whole index and recreate with custom autocomplete analyzer
### Delete entire Movie index
DELETE {{url}}/movies
Content-Type: application/json

### Movie properties updated after deleting entire index
PUT {{url}}/movies
Content-Type: application/json

{
    "settings": {
        "analysis": {
            "filter": {
                "autocomplete_filter": {
                    "type": "edge_ngram",
                    "min_gram": 1,
                    "max_gram": 20
                }
            },
            "analyzer": {
                "autocomplete": {
                    "type": "custom",
                    "tokenizer": "standard",
                    "filter": [
                        "lowercase",
                        "autocomplete_filter"
                    ]
                }
            }
        }
    }
}

###Query analyzer
GET {{url}}/movies/_analyze
Content-Type: application/json

{
    "analyzer": "autocomplete",
    "text": "Sta"
}

### title properties updated after deleting entire index
PUT {{url}}/movies/_mapping
Content-Type: application/json

{
    "properties": {
        "title": {
            "type": "text",
            "analyzer": "autocomplete"
        }
    }       
}

### PUT Bulk movies
PUT {{url}}/_bulk
Content-Type: application/x-ndjson

{ "create" : { "_index" : "movies", "_id" : "135569" } }
{ "id": "135569", "title" : "Star Trek Beyond", "year":2016 , "genre":["Action", "Adventure", "Sci-Fi"] }
{ "create" : { "_index" : "movies", "_id" : "122886" } }
{ "id": "122886", "title" : "Star Wars: Episode VII - The Force Awakens", "year":2015 , "genre":["Action", "Adventure", "Fantasy", "Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "109487" } }
{ "id": "109487", "title" : "Interstellar", "year":2014 , "genre":["Sci-Fi", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "58559" } }
{ "id": "58559", "title" : "Dark Knight, The", "year":2008 , "genre":["Action", "Crime", "Drama", "IMAX"] }
{ "create" : { "_index" : "movies", "_id" : "1924" } }
{ "id": "1924", "title" : "Plan 9 from Outer Space", "year":1959 , "genre":["Horror", "Sci-Fi"] }    
//Give a new line here. Not '\n' but the actual new line.
//don't forget to check content type

###Query analyzer - which will search Plan 9 from Outer Space as well
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "title": "sta"
        }
    }
}


###Query analyzer - worked as expected. But "star tr" will also search Star Wars along with star trek which may be not expected behaviour
GET {{url}}/movies/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "title": {
                "query": "sta",
                "analyzer": "standard"
            }
        }
    }
}